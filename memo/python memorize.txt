변수 함수 클래스 

모듈  라이브러리 프레임 워크

// 몫
% 나머지
** 제곱

if 조건문:
	코드 
elif 조건문:
	코드
else:
	코드

for i in range(시작값,종료값,증가값):
	코드
while 변수 < 종료값:
	코드
	변수 += 증가값 

## 리스트 내부함수 (데이터 변경O)
a.append()   a.insert(위치, 값)
a.pop()     a.remove(값)    a.clear()    del a[위치]
a.sort()    a.reverse() 
len(a)
b = a.copy()

## 문자열 함수   (데이터 변경X)
a.upper()    a.lower()    a.swapcase()    a.title()
a.strip()   a.lstrip()     a.rstrip()            변수대입 가능
a.replace('무엇을', '무엇으로')
a.split()
a.startswith()  a.endwith()

## 튜플, 리스트, 딕셔너리 
dict.keys()    dict.values()    dict.items()
집에서 노트에 표로 튜플, 리스트, 딕셔너리 값 변경할 것

## 함수
return 

## Class 
class Class명:
	def __init__(self,input_a,input_b):
		self.a = input_a
		self.b = input_b
	def mul(self):
		result = self.a * self.b
		return result
a_class = Calculate(10,5)
a_class.a = 10
a_class.mul()
 -> 15

## 라이브러리 
pip이라는 공간에 라이브러리들이 저장되어 있다.
!pip install 라이브러리명 
import 라이브러리명 as 별칭
from 라이브러리명 import (Class | fun | module)

## 판다스 (하나의 라이브러리)
series dataframe 
pd_series = pd.Series(
	[10, 20, 30],
	index = ['A', 'B', 'C']
)

#Series 에는 적어도 2개의 변수(index, values)가 존재한다.
pd_series.index           pd_series.values
#Dataframe에는 적어도 3개의 변수(index, columns, values)가 존재한다.
pd_df = pd.DataFrame(
	[
	[1,2,3],
	[4,5,6],
	[7,8,9]
	],
	index = ['a', 'b', 'c'],
	columns = ['A', 'B', 'C']
)
pd_df.index[0]

# 특정 값을 변경하기 위해서는
pd_df.rename(index = {'전' : '후'} ,
	     columns = {'전': '후'},
	     inplace = True of False)
#
df2 = pd_df.copy()
pd.read_csv("파일의 경로")
pd.read_json("파일의 경로")
pd.read_excel("파일의 경로")
pd.read_xml("파일의 경로")
pd.read_html(html로 이루어진 문자형데이터)

한글이 있을경우 
pd.read_csv('../csv/주민등록.csv',
	  encoding = 'CP949')

# 데이터프레임 함수
df.drop('index명 or col명' , axis = 0(기본값) or 1 )
df.head()
df.tail(10)
df.info()
df.isna()   참 거짓 형태로 출력해줌
df.isna().sum(axis = 1)
df.describe()    통계정보확인
df.sort_index(['기준점'], ascending = T or F)
df.sort_values(
	['기준점'],
	ascending = True or False     # 기본값 : True(오름차순)
)
df.reset_index(drop = True of False)      # 기본값 : F(기존 인덱스 col에 추가)

# 필터링
df.loc[인덱스조건식or값 , 컬럼조건식or값]
df.iloc[인덱스위치 , 컬럼위치]

# 특정 컬럼의 인덱스 아래로 이동 (차이계산)
df['컬럼명'].shift(n)    인덱스를 n만큼 아래로 이동시킨다.

df['A'] - df['A'].shift(1)

=>  df['A'].diff(1)

# 새로운 컬럼 생성
df['생성할 컬럼명'] = 정보

# 
df.fillna(data)
df.fillna(method = 'ffill of bfill')
-> 스리즈 형태로 출력 

(df[''] <0).any( axis = 0 or 1 )

# group
df[['a','b','c']].groupby(['a','b']).agg(['sum','count'])

# pivot_table

## matplotlib
# 플롯그래프 (라인그래프)
plt.plot([1,2,3,4], [10,20,10,30], label = 'A')
plt.plot([1,3,5,7], [20,40,8,1], label = 'B')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('그래프')
plt.legend()
plt.show()

# 막대그래프
plt.bar(x,y)           plt.barh(x,y)
plt.bar(x,y, width = 0.4, color=['r','b','k'])
graph = plt.bar(x,y)
graph[2].set_color('r')
plt.show()

# 산점도그래프
plt.scatter(x,y)

## map함수, lambda 함수
map() : 1차원 자료형 구조 데이터에서 각 데이터들을 하나씩 추출하여 작업
map(함수, 1차원 리스트명) # by python base

일반함수는 선언과 호출 2가지 과정이 나눠지는 반면,
lambda 함수는 선언과 호출을 동시에 한다.
lambda 매개변수명 : 실행이 될 코드

df['a'] = list(map(
	lamba x : x + 1,
	df['a']
))

map()
by python : 변수를 넣어줘야 한다. 파이썬에는 내장된 data가 없기 때문.
by Series : 변수 안 넣어줘도 된다. 

## 스리즈 함수 
Se.map(함수)
Se.replace("전", "후")

## 비트연산자

